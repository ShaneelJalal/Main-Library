# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def containsBoth(self, root, p, q):
        if not root: return 0
        return (root.val in [p.val, q.val])\
        + self.containsBoth(root.left, p, q)\
        + self.containsBoth(root.right, p, q)
        
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root and self.containsBoth(root.left, p, q) == 2:
            return self.lowestCommonAncestor(root.left, p, q)
        if root and self.containsBoth(root.right, p, q) == 2:
            return self.lowestCommonAncestor(root.right, p, q)
        else: return root
        
