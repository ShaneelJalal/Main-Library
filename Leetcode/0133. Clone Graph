"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""
class Solution:
    def cloneGraph(self, head: 'Node') -> 'Node':
        if not head: return None
        # Iterate through graph with DFS
        old_to_new = {}
        visited = set()
        stack = [head]
        while stack:
            node = stack.pop()
            visited.add(node)

            # build our new graph as we go along
            old_to_new[node] = Node(node.val)

            for nei in node.neighbors:
                if nei in visited: continue
                stack.append(nei)

        # we're going to have to define these stages
        for old, new in old_to_new.items():
            for nei in old.neighbors:
                new.neighbors.append(old_to_new[nei])
        return old_to_new[head]
